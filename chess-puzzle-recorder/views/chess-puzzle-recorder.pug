html
    head
        title Chess Puzzle Recorder
        link(href="/chessboard/chessboard.css", rel="stylesheet")
    body
        div(id="board", style="width:400px")
        br
        form(method="post", action="/", onsubmit="submitForm()", style="font-family:Courier")
            input(type="button", id="recordBtn", value="Start Recording")
            input(type="submit", id="commitBtn", value="Commit Problem", style="display: none")
            input(type="button", id="resetBtn", value="Reset Board")
            br
            br
            input(style="display:none", id="fen", name="fen")
            input(style="display:none", id="moves", name="moves")
            input(style="display:none", id="problemid", name="problemid")
            input(style="display:none", id="first", name="first")
            input(style="display:none", id="type", name="type")
        script(src="https://code.jquery.com/jquery-3.3.1.min.js")
        script(src="/chessboard/chessboard.js")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js")
        script.
            document.querySelector("#problemid").value = "#{problemid}"
            document.querySelector("#first").value = "#{first}"
            document.querySelector("#type").value = "#{type}"
            console.log("#{problemid}")
            console.log("#{first}")
            console.log("#{moves}")

            var moves = []

            function validateForm() {
                if (moves.length !== 3) {
                    window.alert("Error: Too many or too few moves recorded. Reset board and try again!")
                    return false
                }
                if (game.in_checkmate() !== true) {
                    window.alert("Error: Game is not in checkmate. Reset board and try again!")
                    return false
                }
                return true
            }

            function submitForm() {
                if (validateForm()) {
                    document.recording = false
                    document.getElementById("moves").value = moves.join(";")
                    document.querySelector("#recordBtn").style=""
                    document.querySelector("#commitBtn").style="display:none"
                    moves = []
                }
                else {
                    event.preventDefault()
                }
            }

            const board = ChessBoard('board', {
                draggable: true,
                position: "#{fen}",
                dropOffBoard: 'snapback',
                sparePieces: true,
                onDrop: function(source, target) {
                    if (document.recording) {
                        if (game.move({"from": source, "to": target, "promotion": "q"}) === null) {
                            return "snapback"
                        }
                        moves.push(source + "-" + target)
                    }
                },
                onSnapEnd: function() { if (document.recording) { board.position(game.fen()) } } // For pawn promotion.
            })

            document.querySelector("#recordBtn").onclick = function() {
                document.recording = true
                game = new Chess(`${board.fen()} ${"#{first}".startsWith("W") ? "w" : "b"} - - 0 1`)
                document.querySelector("#recordBtn").style="display:none"
                document.querySelector("#commitBtn").style=""
                document.getElementById("fen").value = board.fen()
            }
            document.querySelector("#resetBtn").onclick = function() {
                board.position("#{fen}")
                moves = []
                if (document.recording) {
                    document.querySelector("#commitBtn").style="display:none"
                    document.querySelector("#recordBtn").style=""
                    document.recording = false
                }
            }
